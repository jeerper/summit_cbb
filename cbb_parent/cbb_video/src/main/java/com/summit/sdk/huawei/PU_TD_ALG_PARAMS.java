package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_TD_ALG_PARAMS extends Structure {
	/** \u0368\ufffd\ufffdID */
	public NativeLong ulChannelId;
	/** \ufffd\u3de8\u02b9\ufffd\ufffd */
	public boolean bEnable;
	/** \u03a5\ufffd\u00b9\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5\ufffd\ufffd\ufffd\ufffd\u03bb:\ufffd\ufffd\ufffd\u04e3\ufffd\ufffd\ufffd\u03a7:1-1440 */
	public NativeLong ulFilterThreshold;
	/** \ufffd\ufffd\u0328\u0423\u05fc\ufffd\ufffd\ufffd\ufffd(\u02ee\u01bd)\ufffd\ufffd\ufffd\ufffd\u03a7:-2 - 2 */
	public NativeLong lPTZCalibrationHorizontal;
	/** \ufffd\ufffd\u0328\u0423\u05fc\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\u05b1)\ufffd\ufffd\ufffd\ufffd\u03a7:-2 - 2 */
	public NativeLong lPTZCalibrationVertical;
	/** \u00bc\ufffd\ufffd\ufffd\ufffd\u02b9\ufffd\ufffd */
	public boolean bRecordEnable;
	/**
	 * \u03a5\ufffd\ufffd\u0363\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : PU_TD_ILLEGAL_TYPE_E
	 */
	public int enIllegalType;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_TD_ALG_PARAMS() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("ulChannelId", "bEnable", "ulFilterThreshold", "lPTZCalibrationHorizontal", "lPTZCalibrationVertical", "bRecordEnable", "enIllegalType", "szReserve");
	}
	/**
	 * @param ulChannelId \u0368\ufffd\ufffdID<br>
	 * @param bEnable \ufffd\u3de8\u02b9\ufffd\ufffd<br>
	 * @param ulFilterThreshold \u03a5\ufffd\u00b9\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5\ufffd\ufffd\ufffd\ufffd\u03bb:\ufffd\ufffd\ufffd\u04e3\ufffd\ufffd\ufffd\u03a7:1-1440<br>
	 * @param lPTZCalibrationHorizontal \ufffd\ufffd\u0328\u0423\u05fc\ufffd\ufffd\ufffd\ufffd(\u02ee\u01bd)\ufffd\ufffd\ufffd\ufffd\u03a7:-2 - 2<br>
	 * @param lPTZCalibrationVertical \ufffd\ufffd\u0328\u0423\u05fc\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\u05b1)\ufffd\ufffd\ufffd\ufffd\u03a7:-2 - 2<br>
	 * @param bRecordEnable \u00bc\ufffd\ufffd\ufffd\ufffd\u02b9\ufffd\ufffd<br>
	 * @param enIllegalType \u03a5\ufffd\ufffd\u0363\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : PU_TD_ILLEGAL_TYPE_E<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_TD_ALG_PARAMS(NativeLong ulChannelId, boolean bEnable, NativeLong ulFilterThreshold, NativeLong lPTZCalibrationHorizontal, NativeLong lPTZCalibrationVertical, boolean bRecordEnable, int enIllegalType, byte szReserve[]) {
		super();
		this.ulChannelId = ulChannelId;
		this.bEnable = bEnable;
		this.ulFilterThreshold = ulFilterThreshold;
		this.lPTZCalibrationHorizontal = lPTZCalibrationHorizontal;
		this.lPTZCalibrationVertical = lPTZCalibrationVertical;
		this.bRecordEnable = bRecordEnable;
		this.enIllegalType = enIllegalType;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_TD_ALG_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_TD_ALG_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_TD_ALG_PARAMS implements Structure.ByValue {
		
	};
}
