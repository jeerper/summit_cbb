package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_ITS_FLOW_RATE_PARA extends Structure {
	/** \u0368\ufffd\ufffdIDF */
	public NativeLong ulChannelId;
	/**
	 * \ufffd\u01f7\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : PU_ENABLE_TYPE_E
	 */
	public int bEnable;
	/** \u0373\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd) */
	public NativeLong uInterval;
	/** \ufffd\ufffd\ufffd\u03bb\ufffd\u00fe\ufffd\ufffd\ufffd\u00b7\ufffd\u06be\ufffd\ufffd\ufffd(\ufffd\ufffd) */
	public NativeLong uCameraFromIntersection;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\uda8e\udd36\ufffd(\ufffd\ufffd) */
	public NativeLong uDetectionAreaLength;
	/** \u04f5\ufffd\ufffd\ufffd\u03f1\ufffd\ufffd\ufffd\u05b5 */
	public NativeLong uCongestionLaneThreshold;
	/** \u04f5\ufffd\ufffd\ufffd\ufffd\u05b5(Km/h) */
	public NativeLong uCongestionThreshold;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5(Km/h) */
	public NativeLong uSlowThreshold;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_ITS_FLOW_RATE_PARA() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("ulChannelId", "bEnable", "uInterval", "uCameraFromIntersection", "uDetectionAreaLength", "uCongestionLaneThreshold", "uCongestionThreshold", "uSlowThreshold", "szReserve");
	}
	/**
	 * @param ulChannelId \u0368\ufffd\ufffdIDF<br>
	 * @param bEnable \ufffd\u01f7\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : PU_ENABLE_TYPE_E<br>
	 * @param uInterval \u0373\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd)<br>
	 * @param uCameraFromIntersection \ufffd\ufffd\ufffd\u03bb\ufffd\u00fe\ufffd\ufffd\ufffd\u00b7\ufffd\u06be\ufffd\ufffd\ufffd(\ufffd\ufffd)<br>
	 * @param uDetectionAreaLength \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\uda8e\udd36\ufffd(\ufffd\ufffd)<br>
	 * @param uCongestionLaneThreshold \u04f5\ufffd\ufffd\ufffd\u03f1\ufffd\ufffd\ufffd\u05b5<br>
	 * @param uCongestionThreshold \u04f5\ufffd\ufffd\ufffd\ufffd\u05b5(Km/h)<br>
	 * @param uSlowThreshold \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5(Km/h)<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_ITS_FLOW_RATE_PARA(NativeLong ulChannelId, int bEnable, NativeLong uInterval, NativeLong uCameraFromIntersection, NativeLong uDetectionAreaLength, NativeLong uCongestionLaneThreshold, NativeLong uCongestionThreshold, NativeLong uSlowThreshold, byte szReserve[]) {
		super();
		this.ulChannelId = ulChannelId;
		this.bEnable = bEnable;
		this.uInterval = uInterval;
		this.uCameraFromIntersection = uCameraFromIntersection;
		this.uDetectionAreaLength = uDetectionAreaLength;
		this.uCongestionLaneThreshold = uCongestionLaneThreshold;
		this.uCongestionThreshold = uCongestionThreshold;
		this.uSlowThreshold = uSlowThreshold;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_ITS_FLOW_RATE_PARA(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_ITS_FLOW_RATE_PARA implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_ITS_FLOW_RATE_PARA implements Structure.ByValue {
		
	};
}
