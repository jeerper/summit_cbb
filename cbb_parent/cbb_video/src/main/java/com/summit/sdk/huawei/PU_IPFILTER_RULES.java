package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_IPFILTER_RULES extends Structure {
	/**
	 * \ufffd\ufffd\ufffd\u02f5\ufffdIP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[16]
	 */
	public byte[] szIPAddress = new byte[16];
	/**
	 * \ufffd\ufffd\ufffd\u02f5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : CHAR[16]
	 */
	public byte[] szSubNetAddress = new byte[16];
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02bc\ufffd\u02ff\ufffd */
	public NativeLong ulIpBeginPort;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b9\ufffd\u02ff\ufffd */
	public NativeLong ulIpEndPort;
	/**
	 * \ufffd\ufffd\ufffd\u02f8\ufffd\u042d\ufffd\ufffd\ufffd\ufffd\u0770\ufffd<br>
	 * C type : PU_IP_PROTOCOL_TYPE_E
	 */
	public int enProtocolType;
	/** IP\ufffd\ufffd\ufffd\u02f9\ufffd\ufffd\ufffd\u05f4\u032c\ufffd\ufffd\ufffd\ufffd\u0427\ufffd\ufffd\u03b4\ufffd\ufffd\u0427 */
	public boolean bStatus;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_IPFILTER_RULES() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("szIPAddress", "szSubNetAddress", "ulIpBeginPort", "ulIpEndPort", "enProtocolType", "bStatus", "szReserve");
	}
	/**
	 * @param szIPAddress \ufffd\ufffd\ufffd\u02f5\ufffdIP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[16]<br>
	 * @param szSubNetAddress \ufffd\ufffd\ufffd\u02f5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : CHAR[16]<br>
	 * @param ulIpBeginPort \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02bc\ufffd\u02ff\ufffd<br>
	 * @param ulIpEndPort \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b9\ufffd\u02ff\ufffd<br>
	 * @param enProtocolType \ufffd\ufffd\ufffd\u02f8\ufffd\u042d\ufffd\ufffd\ufffd\ufffd\u0770\ufffd<br>
	 * C type : PU_IP_PROTOCOL_TYPE_E<br>
	 * @param bStatus IP\ufffd\ufffd\ufffd\u02f9\ufffd\ufffd\ufffd\u05f4\u032c\ufffd\ufffd\ufffd\ufffd\u0427\ufffd\ufffd\u03b4\ufffd\ufffd\u0427<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_IPFILTER_RULES(byte szIPAddress[], byte szSubNetAddress[], NativeLong ulIpBeginPort, NativeLong ulIpEndPort, int enProtocolType, boolean bStatus, byte szReserve[]) {
		super();
		if ((szIPAddress.length != this.szIPAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szIPAddress = szIPAddress;
		if ((szSubNetAddress.length != this.szSubNetAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSubNetAddress = szSubNetAddress;
		this.ulIpBeginPort = ulIpBeginPort;
		this.ulIpEndPort = ulIpEndPort;
		this.enProtocolType = enProtocolType;
		this.bStatus = bStatus;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_IPFILTER_RULES(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_IPFILTER_RULES implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_IPFILTER_RULES implements Structure.ByValue {
		
	};
}
