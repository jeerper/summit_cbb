package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_DECLINK_INFO extends Structure {
	/**
	 * \ufffd\ufffd\u01b5IP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[40]
	 */
	public byte[] szDecVIP = new byte[40];
	/** \ufffd\ufffd\u01b5\ufffd\u02ff\ufffd */
	public NativeLong ulDecVPort;
	/**
	 * \ufffd\ufffd\u01b5IP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[40]
	 */
	public byte[] szDecAIP = new byte[40];
	/** \ufffd\ufffd\u01b5\ufffd\u02ff\ufffd */
	public NativeLong ulDecAPort;
	/** \ufffd\ufffd\ufffd\ufffd\u042d\ufffd\ufffd: 1:RTP(TCP Client) 2:RTP(UDP) ...  \ufffd\ufffd\u01b5\ufffd\ufffd\u01b5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u036c,\ufffd\ufffdTCP\u02b1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdIP\ufffd\ufffdPORT\u03aa\ufffd\ufffd\u03a3\ufffd\ufffd\ufffdUDP\u02b1\ufffd\ufffdIP\ufffd\ufffdPORT\u03aa\ufffd\ufffd\ufffd\ufffd */
	public byte chTransProtocol;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\u05be\ufffd\ufffd0 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01b5; 1 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01b5; 2 \u036c\u02b1\ufffd\ufffd,\u036c\u02b1\ufffd\ufffd\u02b1\u02b9\ufffd\ufffdVIP\ufffd\ufffdVPORT\ufffd\ufffd\ufffd\ufffd */
	public byte chDecFlags;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\u05be,\ufffd\ufffdVIP/VPort \ufffd\ufffd\ufffd\ufffdRTSP\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: 0 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd,1 \ufffd\ufffd\ufffd\ufffd */
	public byte chKeepaliveFlags;
	/**
	 * \u0524\ufffd\ufffd,\u0368\ufffd\ufffdsdk\ufffd\ufffd\ufffd\ufffd:szRes[0]= 0;sdk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ue8ec\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b1\ufffd\u04f7\ufffd\ufffd\ufffd:szRes[0]=1<br>
	 * C type : CHAR[32]
	 */
	public byte[] szRes = new byte[32];
	public PU_DECLINK_INFO() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("szDecVIP", "ulDecVPort", "szDecAIP", "ulDecAPort", "chTransProtocol", "chDecFlags", "chKeepaliveFlags", "szRes");
	}
	/**
	 * @param szDecVIP \ufffd\ufffd\u01b5IP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[40]<br>
	 * @param ulDecVPort \ufffd\ufffd\u01b5\ufffd\u02ff\ufffd<br>
	 * @param szDecAIP \ufffd\ufffd\u01b5IP\ufffd\ufffd\u05b7<br>
	 * C type : CHAR[40]<br>
	 * @param ulDecAPort \ufffd\ufffd\u01b5\ufffd\u02ff\ufffd<br>
	 * @param chTransProtocol \ufffd\ufffd\ufffd\ufffd\u042d\ufffd\ufffd: 1:RTP(TCP Client) 2:RTP(UDP) ...  \ufffd\ufffd\u01b5\ufffd\ufffd\u01b5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u036c,\ufffd\ufffdTCP\u02b1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdIP\ufffd\ufffdPORT\u03aa\ufffd\ufffd\u03a3\ufffd\ufffd\ufffdUDP\u02b1\ufffd\ufffdIP\ufffd\ufffdPORT\u03aa\ufffd\ufffd\ufffd\ufffd<br>
	 * @param chDecFlags \ufffd\ufffd\ufffd\ufffd\ufffd\u05be\ufffd\ufffd0 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01b5; 1 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01b5; 2 \u036c\u02b1\ufffd\ufffd,\u036c\u02b1\ufffd\ufffd\u02b1\u02b9\ufffd\ufffdVIP\ufffd\ufffdVPORT\ufffd\ufffd\ufffd\ufffd<br>
	 * @param chKeepaliveFlags \ufffd\ufffd\ufffd\ufffd\ufffd\u05be,\ufffd\ufffdVIP/VPort \ufffd\ufffd\ufffd\ufffdRTSP\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: 0 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd,1 \ufffd\ufffd\ufffd\ufffd<br>
	 * @param szRes \u0524\ufffd\ufffd,\u0368\ufffd\ufffdsdk\ufffd\ufffd\ufffd\ufffd:szRes[0]= 0;sdk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ue8ec\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b1\ufffd\u04f7\ufffd\ufffd\ufffd:szRes[0]=1<br>
	 * C type : CHAR[32]
	 */
	public PU_DECLINK_INFO(byte szDecVIP[], NativeLong ulDecVPort, byte szDecAIP[], NativeLong ulDecAPort, byte chTransProtocol, byte chDecFlags, byte chKeepaliveFlags, byte szRes[]) {
		super();
		if ((szDecVIP.length != this.szDecVIP.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDecVIP = szDecVIP;
		this.ulDecVPort = ulDecVPort;
		if ((szDecAIP.length != this.szDecAIP.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDecAIP = szDecAIP;
		this.ulDecAPort = ulDecAPort;
		this.chTransProtocol = chTransProtocol;
		this.chDecFlags = chDecFlags;
		this.chKeepaliveFlags = chKeepaliveFlags;
		if ((szRes.length != this.szRes.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szRes = szRes;
	}
	public PU_DECLINK_INFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_DECLINK_INFO implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_DECLINK_INFO implements Structure.ByValue {
		
	};
}
