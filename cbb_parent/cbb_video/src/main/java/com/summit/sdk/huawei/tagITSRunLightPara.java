package com.summit.sdk.huawei;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagITSRunLightPara extends Structure {
	/**
	 * \ufffd\ufffd\ufffd\u023c\ufffd\ufffd\ufffd<br>
	 * C type : PU_ITS_RUNLIGHT_PRIORITY_E
	 */
	public int enRunLightPriority;
	/**
	 * \u03a5\ufffd\ufffd\ufffd\u07fc\ufffd<br>
	 * C type : PU_ITS_RUNLIGHT_RULE_E
	 */
	public int enRunLightRule;
	/** \ufffd\u06b6\ufffd\ufffd\ufffd\u05e5\u037c\u01ab\ufffd\ufffd */
	public int iSecondSnapOffset;
	/** \u037c\u01ac\ufffd\ufffd\u0421\u01ab\ufffd\ufffd */
	public int iPicMinOffset;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public tagITSRunLightPara() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("enRunLightPriority", "enRunLightRule", "iSecondSnapOffset", "iPicMinOffset", "szReserve");
	}
	/**
	 * @param enRunLightPriority \ufffd\ufffd\ufffd\u023c\ufffd\ufffd\ufffd<br>
	 * C type : PU_ITS_RUNLIGHT_PRIORITY_E<br>
	 * @param enRunLightRule \u03a5\ufffd\ufffd\ufffd\u07fc\ufffd<br>
	 * C type : PU_ITS_RUNLIGHT_RULE_E<br>
	 * @param iSecondSnapOffset \ufffd\u06b6\ufffd\ufffd\ufffd\u05e5\u037c\u01ab\ufffd\ufffd<br>
	 * @param iPicMinOffset \u037c\u01ac\ufffd\ufffd\u0421\u01ab\ufffd\ufffd<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public tagITSRunLightPara(int enRunLightPriority, int enRunLightRule, int iSecondSnapOffset, int iPicMinOffset, byte szReserve[]) {
		super();
		this.enRunLightPriority = enRunLightPriority;
		this.enRunLightRule = enRunLightRule;
		this.iSecondSnapOffset = iSecondSnapOffset;
		this.iPicMinOffset = iPicMinOffset;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public tagITSRunLightPara(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagITSRunLightPara implements Structure.ByReference {
		
	};
	public static class ByValue extends tagITSRunLightPara implements Structure.ByValue {
		
	};
}
