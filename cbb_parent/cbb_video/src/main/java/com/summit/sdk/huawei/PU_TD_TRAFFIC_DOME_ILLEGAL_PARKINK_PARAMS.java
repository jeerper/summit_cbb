package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS extends Structure {
	/** \ufffd\ufffd\ufffd\u02b9\ufffd\ufffd */
	public boolean bEnable;
	/** \u05e5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd */
	public NativeLong ulSnapFrameNum;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd */
	public NativeLong ulSensitivity;
	/** \ufffd\ufffd\ufffd\ufffd\u02b1\ufffd\ufffd */
	public NativeLong ulContinuousDuration;
	/**
	 * \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : BOOL[(6)]
	 */
	public boolean[] abRelatedLane = new boolean[6];
	/** \ufffd\ufffd\ufffd\ufffd\ufffd(\u013f\u01f0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05e5\ufffd\u0139\ufffd\ufffd\ufffd) */
	public NativeLong ulDetectInterval;
	/**
	 * V2\ufffd\u04ff\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00fd\u1e79\ufffd\u58ec\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0434<br>
	 * C type : PU_TD_ILLEGAL_PARKINK_SNAP_RULE_S
	 */
	public PU_TD_ILLEGAL_PARKINK_SNAP_RULE stSnapRules;
	public PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("bEnable", "ulSnapFrameNum", "ulSensitivity", "ulContinuousDuration", "abRelatedLane", "ulDetectInterval", "stSnapRules");
	}
	/**
	 * @param bEnable \ufffd\ufffd\ufffd\u02b9\ufffd\ufffd<br>
	 * @param ulSnapFrameNum \u05e5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * @param ulSensitivity \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * @param ulContinuousDuration \ufffd\ufffd\ufffd\ufffd\u02b1\ufffd\ufffd<br>
	 * @param abRelatedLane \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<br>
	 * C type : BOOL[(6)]<br>
	 * @param ulDetectInterval \ufffd\ufffd\ufffd\ufffd\ufffd(\u013f\u01f0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05e5\ufffd\u0139\ufffd\ufffd\ufffd)<br>
	 * @param stSnapRules V2\ufffd\u04ff\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00fd\u1e79\ufffd\u58ec\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0434<br>
	 * C type : PU_TD_ILLEGAL_PARKINK_SNAP_RULE_S
	 */
	public PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS(boolean bEnable, NativeLong ulSnapFrameNum, NativeLong ulSensitivity, NativeLong ulContinuousDuration, boolean abRelatedLane[], NativeLong ulDetectInterval, PU_TD_ILLEGAL_PARKINK_SNAP_RULE stSnapRules) {
		super();
		this.bEnable = bEnable;
		this.ulSnapFrameNum = ulSnapFrameNum;
		this.ulSensitivity = ulSensitivity;
		this.ulContinuousDuration = ulContinuousDuration;
		if ((abRelatedLane.length != this.abRelatedLane.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.abRelatedLane = abRelatedLane;
		this.ulDetectInterval = ulDetectInterval;
		this.stSnapRules = stSnapRules;
	}
	public PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_TD_TRAFFIC_DOME_ILLEGAL_PARKINK_PARAMS implements Structure.ByValue {
		
	};
}
