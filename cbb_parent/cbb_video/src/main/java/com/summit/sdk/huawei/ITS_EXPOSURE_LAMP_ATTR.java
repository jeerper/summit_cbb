package com.summit.sdk.huawei;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : E:\video\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ITS_EXPOSURE_LAMP_ATTR extends Structure {
	/**
	 * \ufffd\ufffd\ufffd\u00f5\u01b9\ufffd\ufffd\ufffd\u0123\u02bd<br>
	 * C type : PU_EXT_LAMP_WORK_MODE_E
	 */
	public int enExtLampWorkMode;
	/** \ufffd\ufffd\ufffd\ufffd */
	public NativeLong ulPulseWidth;
	/** \ufffd\u04fa\ufffd\u02b1\ufffd\u48ec\ufffd\ufffd\ufffd\u06b5\ufffd\ufffd\ufffd\u036c\ufffd\ufffd */
	public NativeLong ulDelayTime;
	/**
	 * \ufffd\ufffd\ufffd\ufffd\ufffd\u01b4\ufffd\ufffd\ufffd\ufffd\ufffd\u01bd<br>
	 * C type : PU_EXP_LAMP_TRIG_LEVEL_E
	 */
	public int enExpLampTrigLevel;
	/** \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5\ufffd\ufffd\ufffd\u0536\ufffd\u0123\u02bd\u02b1\ufffd\ufffd\u0427 */
	public NativeLong ulLightThreshold;
	/** C type : CHAR[32] */
	public byte[] szReserved = new byte[32];
	public ITS_EXPOSURE_LAMP_ATTR() {
		super();
	}
	protected List<String > getFieldOrder() {
		return Arrays.asList("enExtLampWorkMode", "ulPulseWidth", "ulDelayTime", "enExpLampTrigLevel", "ulLightThreshold", "szReserved");
	}
	/**
	 * @param enExtLampWorkMode \ufffd\ufffd\ufffd\u00f5\u01b9\ufffd\ufffd\ufffd\u0123\u02bd<br>
	 * C type : PU_EXT_LAMP_WORK_MODE_E<br>
	 * @param ulPulseWidth \ufffd\ufffd\ufffd\ufffd<br>
	 * @param ulDelayTime \ufffd\u04fa\ufffd\u02b1\ufffd\u48ec\ufffd\ufffd\ufffd\u06b5\ufffd\ufffd\ufffd\u036c\ufffd\ufffd<br>
	 * @param enExpLampTrigLevel \ufffd\ufffd\ufffd\ufffd\ufffd\u01b4\ufffd\ufffd\ufffd\ufffd\ufffd\u01bd<br>
	 * C type : PU_EXP_LAMP_TRIG_LEVEL_E<br>
	 * @param ulLightThreshold \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5\ufffd\ufffd\ufffd\u0536\ufffd\u0123\u02bd\u02b1\ufffd\ufffd\u0427<br>
	 * @param szReserved C type : CHAR[32]
	 */
	public ITS_EXPOSURE_LAMP_ATTR(int enExtLampWorkMode, NativeLong ulPulseWidth, NativeLong ulDelayTime, int enExpLampTrigLevel, NativeLong ulLightThreshold, byte szReserved[]) {
		super();
		this.enExtLampWorkMode = enExtLampWorkMode;
		this.ulPulseWidth = ulPulseWidth;
		this.ulDelayTime = ulDelayTime;
		this.enExpLampTrigLevel = enExpLampTrigLevel;
		this.ulLightThreshold = ulLightThreshold;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public ITS_EXPOSURE_LAMP_ATTR(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ITS_EXPOSURE_LAMP_ATTR implements Structure.ByReference {
		
	};
	public static class ByValue extends ITS_EXPOSURE_LAMP_ATTR implements Structure.ByValue {
		
	};
}
